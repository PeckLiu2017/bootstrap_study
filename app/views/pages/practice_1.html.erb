<div class="container">
  <h2>Modal Example</h2>
  <!-- Trigger the modal with a button -->
  <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Open Modal</button>
  <!-- Modal -->
  <div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
      <!-- Modal content-->
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal">&times;</button>
          <h4 class="modal-title">Modal Header</h4>
        </div>
        <div class="modal-body">
          <p>Some text in the modal.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  +function ($) {
    'use strict';
      // MODAL CLASS DEFINITION
      // =======================step 2-2
      var Modal = function (element, options) {
        // this 的内容：
        // Modal {}
        // $backdrop:null
        // $body:[body, context: body]
        // $dialog:[div.modal-dialog, prevObject: jQuery.fn.init(1), context: div#myModal.modal.fade, selector: ".modal-dialog"]
        // $element:[div#myModal.modal.fade, context: div#myModal.modal.fade]
        // ignoreBackdropClick:false
        // isShown:null
        // options:{target: "#myModal", toggle: "modal"}
        // originalBodyPad:null
        // scrollbarWidth:0
        // __proto__:Object
        // 传进来的各种参数
        this.options             = options
        this.$body               = $(document.body)
        // element表示modal弹出框容器及内部元素，options是设置选项
        this.$element            = $(element)
        this.$dialog             = this.$element.find('.modal-dialog')
        // modal下面的背景对象
        this.$backdrop           = null
        // 默认情况下，不设置是否已经显示弹窗
        this.isShown             = null
        this.originalBodyPad     = null
        this.scrollbarWidth      = 0
        this.ignoreBackdropClick = false

        // 如果设置了remote，就加载remote指定url的内容到modal-content样式的元素内，并触发loaded.bs.modal事件
        // if (this.options.remote) {
        //   // 第一次不触发
        //   this.$element
        //     .find('.modal-content')
        //     .load(this.options.remote, $.proxy(function () {
        //       this.$element.trigger('loaded.bs.modal')
        //     }, this))
        // }
      }

      // MODAL DEFAULTS
      // =======================step 2-1
      Modal.DEFAULTS = {
        backdrop: true, // 默认单击弹窗以外的地方时自动关闭弹窗
        keyboard: true, // 默认设置，按Esc键关闭弹窗
        show: true// 默认设置，单击触发元素时打开弹窗
      }

      Modal.prototype.toggle = function (_relatedTarget) {
        //this.isShown是 true 就 hide(), 否则 show 
        //<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Open Modal</button>
        return this.isShown ? this.hide() : this.show(_relatedTarget)
      }

      // Modal.prototype.show
      // =======================step 2-3
      Modal.prototype.show = function (_relatedTarget) {
        // this = Modal
        // {options: {…}, $body: jQuery.fn.init(1), $element: jQuery.fn.init(1), $dialog: jQuery.fn.init(1),
        // $backdrop: null, …}$backdrop: null$body: [body, context: body]
        // $dialog: [div.modal-dialog, prevObject: jQuery.fn.init(1), context: div#myModal.modal.fade, selector: ".modal-dialog"]
        // $element: [div#myModal.modal.fade, context: div#myModal.modal.fade] console超链
        // ignoreBackdropClick: falseisShown: nulloptions: {backdrop: true, keyboard: true, show: true, target: "#myModal", toggle: "modal"}
        // originalBodyPad: nullscrollbarWidth: 0__proto__: Object
        var that = this
        // $.Event 注册 show 一个事件
        // 定义弹窗前的触发事件
        // jQuery.Event {type: "show.bs.modal", relatedTarget: button.btn.btn-info.btn-lg,
        // timeStamp: 1508596341226, jQuery1124035964844045527133: true}
        var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })
        // 这个 trigger 什么时候发挥作用？
        this.$element.trigger(e)
        // 如果已经打开了(或者曾经被阻止过)，则退出执行，后续代码不做处理
        // this.isShown 第一次是 null 直接 return
        // e.isDefaultPrevented() 返回 event.preventDefault() 是否发生过
        if (this.isShown || e.isDefaultPrevented()) return
        // 设置状态为打开
        this.isShown = true
        this.checkScrollbar()
        this.setScrollbar()
        // $body:[body.modal-open, context: body.modal-open]
        this.$body.addClass('modal-open')
        // 处理键盘事件，主要是设置按Esc键的时候是否关闭弹窗
        // this.escape()
        // this.resize()
        // $.proxy(this.hide, this)) 在 this 的作用域中执行 this.hide函数或属性
        // 有 data-dismiss="modal" 的属性被点击,就隐藏它
        this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))
        // $dialog 表示这个弹窗
        // one 方法跟 on 起到的作用是相同的，除了处理函数在一次被调用之后就会失效
        // 点击了隐藏按钮之后
        this.$dialog.on('mousedown.dismiss.bs.modal', function () {
          // 在弹窗上，松开鼠标按钮，忽略背景单击
          that.$element.one('mouseup.dismiss.bs.modal', function (e) {
            if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
          })
        })

        // 如果单击了元素内的子元素(带有[data-dismiss="modal"]属性)，则关闭弹窗
        this.backdrop(function () {
         var transition = $.support.transition && that.$element.hasClass('fade')

         // 如果它没祖先元素，就把它加入 body？？？具体为什么这样呢？
         if (!that.$element.parent().length) {
           // 加入 body 的最后面
           that.$element.appendTo(that.$body) // don't move modals dom position
         }
         // 从这里开始显示出弹窗
         // scrollTop 返回或者设置滚动条的位置
         that.$element
           .show()
           .scrollTop(0)
        // 这里的 this 竟然 undefined ？
        // 这里的 that 是 Modal ？
        //  that.adjustDialog()
         if (transition) {
           that.$element[0].offsetWidth // force reflow
         }
         // 加入 in 样式
         that.$element.addClass('in')

         that.enforceFocus()

         // 显示弹窗之后的事件
         var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

         transition ?
           that.$dialog // wait for modal to slide in
             .one('bsTransitionEnd', function () {
               that.$element.trigger('focus').trigger(e)
             })
             .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
           that.$element.trigger('focus').trigger(e)
            // trigger hide(e)
        })
      }

      // 确保当前打开的弹窗处于焦点状态
      // Modal.prototype.backdrop
      // =======================step 2-7
       Modal.prototype.enforceFocus = function () {
         $(document)
           .off('focusin.bs.modal') // guard against infinite focus loop
           .on('focusin.bs.modal', $.proxy(function (e) {
            // e.target 是一开始的触发按钮
            // this.$element[0]是充满整个屏幕的弹窗
            // this.$element.has(e.target).length) 检查 e.target 是否在 this.$element 之中
            // 给 this.$element加焦点
             if (document !== e.target &&
                 this.$element[0] !== e.target &&
                 !this.$element.has(e.target).length) {
               this.$element.trigger('focus')
             }
           }, this))
       }


      // 添加背景，打开弹窗时触发
      // Modal.prototype.backdrop
      // =======================step 2-6
      Modal.prototype.backdrop = function (callback) {
        // this 仍然是那个 modal
        var that = this
        // 增加 fade 属性
        var animate = this.$element.hasClass('fade') ? 'fade' : ''
        // 在默认值里面设置的 backdrop = true
        if (this.isShown && this.options.backdrop) {
          // console.log(doAnimate) = undefined
          var doAnimate = $.support.transition && animate
          // 点击触发元素之后，先增加暗色背景
          this.$backdrop = $(document.createElement('div'))
            .addClass('modal-backdrop ' + animate)
            .appendTo(this.$body)
          //
          this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {

            if (this.ignoreBackdropClick) {
              this.ignoreBackdropClick = false
              return
            }
            if (e.target !== e.currentTarget) return

            this.options.backdrop == 'static'
              ? this.$element[0].focus()
              : this.hide()
          }, this))

          // offsetWidth = width + padding + border
          if (doAnimate) this.$backdrop[0].offsetWidth // force reflow
          // 本来的 div.modal-backdrop.fade 加上了 in 样式
          this.$backdrop.addClass('in')
          // 这个 callback 就是在 show 中定义的 transition 等等
          // 它作为参数传入
          if (!callback) return
          // 第一次 doAnimate 没有定义，执行 callback()
          doAnimate ?
            this.$backdrop
              .one('bsTransitionEnd', callback)
              .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
            callback()
            // else if 开始关闭弹窗
        } else if (!this.isShown && this.$backdrop) {

           this.$backdrop.removeClass('in')

           // 删除 callback 前先把 callback 执行一遍
           var callbackRemove = function () {
            // 这里开始移除背景
            // 前面为什么不执行呢？
            // 执行 removeBackdrop
            // callback()中执行了 resetScrollbar 和 resetAdjustments,什么时候加进去的呢？
            // callback 的内容：
            // ƒ () {
            //   that.$body.removeClass('modal-open')
            //   that.resetAdjustments()
            //   that.resetScrollbar()
            //   that.$element.trigger('hidden.bs.modal')
            // }
             that.removeBackdrop()
             callback && callback()
           }
           $.support.transition && this.$element.hasClass('fade') ?
             this.$backdrop
               .one('bsTransitionEnd', callbackRemove)
               .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
             callbackRemove()

         } else if (callback) {
           //  执行回调函数如果没有就不执行
           callback()
         }
      }

      // 添加背景，打开弹窗时触发
      // Modal.prototype.backdrop
      // =======================step 2-8
      //关闭弹窗
      Modal.prototype.hide = function (e) {
        if (e) e.preventDefault()

        e = $.Event('hide.bs.modal')


        this.$element.trigger(e)

        // 如果还没打开过弹窗，就 return
        if (!this.isShown || e.isDefaultPrevented()) return
        // 重新设置 isShown = false
        this.isShown = false

        this.escape()
        this.resize()

        $(document).off('focusin.bs.modal')

        // 没看 in 样式怎么用啊，就么就删除了？
        // 解绑 click mouseup mousedown 事件
        this.$element
          .removeClass('in')
          .off('click.dismiss.bs.modal')
          .off('mouseup.dismiss.bs.modal')

        this.$dialog.off('mousedown.dismiss.bs.modal')


        $.support.transition && this.$element.hasClass('fade') ?
          this.$element
            .one('bsTransitionEnd', $.proxy(this.hideModal, this))
            .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
          this.hideModal()
          // this.hideModal() 关闭弹窗
      }

      // 关闭弹窗   ---------section2-11
      Modal.prototype.hideModal = function () {
        var that = this
        // 关闭弹窗
        this.$element.hide()
        // console.log(this);
        this.backdrop(function () {
          that.$body.removeClass('modal-open')
          that.resetAdjustments()
          that.resetScrollbar()
          that.$element.trigger('hidden.bs.modal')
        })
      }

      // 删除背景，关闭弹窗时触发  ----------section2-12
      Modal.prototype.removeBackdrop = function () {
        if (window.console) {
          console.log("step 35");
        }
        this.$backdrop && this.$backdrop.remove()
        this.$backdrop = null
      }

      // 按Esc键是否退出的处理
      // Modal.prototype.escape
      // =======================step 2-9
      //关闭弹窗
      Modal.prototype.escape = function () {
        // this 一直是这个 modal 函数
        // 第一次 this.isShown = false
        if (this.isShown && this.options.keyboard) {
          this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {

            // 如果按了 esc 键并且 this.hide() 定义
            e.which == 27 && this.hide()
          }, this))
          // isShown 在初始 modal 中定义的
        } else if (!this.isShown) {
          this.$element.off('keydown.dismiss.bs.modal')
        }
      }

      // Modal.prototype.resize
      // =======================step 2-10
      // 根据 isShown 的值决定是否调整尺寸
      Modal.prototype.resize = function () {

        if (this.isShown) {
          $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
        } else {
          $(window).off('resize.bs.modal')
        }
      }
      // Modal.prototype.adjustDialog
      // =======================step 2-7
      Modal.prototype.adjustDialog = function () {

        var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

        this.$element.css({
          paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
          paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
        })
      }

      // Modal.prototype.resetAdjustments
      // =======================step 2-12
      Modal.prototype.resetAdjustments = function () {
        if (window.console) {
          console.log("step 47");
        }
        // 空字符串删除CSS属性
        this.$element.css({
          paddingLeft: '',
          paddingRight: ''
        })
      }

      // Modal.prototype.checkScrollbar
      // =======================step 2-4
      Modal.prototype.checkScrollbar = function () {
        // 整个浏览器窗口的宽度 1440
        var fullWindowWidth = window.innerWidth
        // ？什么情况下会触发？
        if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
          var documentElementRect = document.documentElement.getBoundingClientRect()
          // 元素的实际宽度
          fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
        }
        // fullWindowWidth 大于 document.body.clientWidth, body溢出
        this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
        this.scrollbarWidth = this.measureScrollbar()
      }


      // Modal.prototype.setScrollbar
      // =======================step 2-5
      Modal.prototype.setScrollbar = function () {
        // parseInt() 解析字符串返回一个整数
        var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
        this.originalBodyPad = document.body.style.paddingRight || ''
        // 设置 body 的 padding-right
        if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
      }

      Modal.prototype.resetScrollbar = function () {
        if (window.console) {
          console.log("step 50");
        }
        this.$body.css('padding-right', this.originalBodyPad)
      }


      Modal.prototype.measureScrollbar = function () {
        var scrollDiv = document.createElement('div')
        scrollDiv.className = 'modal-scrollbar-measure'
        this.$body.append(scrollDiv)
        // offsetWidth 是加上 border 的元素宽度
        // clientWidth 根据前面的对象来看，这里 scrollDiv.clientWidth = 50
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
        // 难道还会有多个 body ？
        // this.$body[0] console 超链属性
        this.$body[0].removeChild(scrollDiv)
        // 第一次 scrollbarWidth = 0
        return scrollbarWidth
      }

      // MODAL PLUGIN DEFINITION
      // =======================step 2 有分枝
      function Plugin(option, _relatedTarget) {
        // 这里的 this = [div#myModal.modal.fade, context: document, selector: "#myModal"] console 超链属性
        // 是 MODAL DATA-API 中的 $target
        // _relatedTarget = <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Open Modal</button>
        // 是 MODAL DATA-API 中的 this
        // option = {remote: undefined, target: "#myModal", toggle: "modal"}
        return this.each(function () {
          // 这里的 this 是 <!-- Modal --> 下面的所有 html 代码 内容根外面的 this 一样,不带 console 超链属性,是文本
          // $this = [div#myModal.modal.fade, context: document, selector: "#myModal"] console 超链属性
          var $this   = $(this)//是上一步的$target [div#myModal.modal.fade]
          var data    = $this.data('bs.modal')//undefined
          // typeof option == 'object' && option 表示 option 为 object 的话就返回其内容
          // $.extend 函数中后面的参数覆盖前面的
          var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)
          // 如果 data 不存在，就把 'bs.modal' 和 Modal 的实例组成键值对加进去
          if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
          // 暂时没看懂
          console.log("========");
          console.log(option);
          console.log("--------");
                 console.log(typeof option == 'string');
                 console.log("=======-------");
                 console.log(data);
                 console.log("-------=======");

          if (typeof option == 'string') data[option](_relatedTarget)
          // 否则调用 show 函数显示弹窗，data 是个 Modal 实例
          // show 是个原型方法
          else if (options.show) data.show(_relatedTarget)
          //data=Modal {options: Object, $body: r.fn.init(1), $element: r.fn.init(1), $dialog: r.fn.init(1), $backdrop: null…}
        })
      }


      // MODAL NO CONFLICT
      // ================= first than step 1
      // 先备份
      var old = $.fn.modal

      $.fn.modal             = Plugin
      $.fn.modal.Constructor = Modal
      // 再还原
      $.fn.modal.noConflict = function () {
        $.fn.modal = old
        return this
      }

      // MODAL DATA-API
      // =======================step 1
      // .on( events [, selector ] [, data ], handler )
      // 这里写 click.bs.modal.data-api 和 click 是一样的效果
      // '[data-toggle="modal"]'是 selector
      // 这里的 e 是
      // jQuery.Event {originalEvent: MouseEvent, type: "click", timeStamp: 1085.3600000000001, jQuery112407648550656121686: true, isDefaultPrevented: ƒ, …}
      // 记录了触发元素，事件类型，事件，坐标等信息
      $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
      // 获取 html 代码
      // this = <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Open Modal</button>
      // 捕获触发元素
      // [button.btn.btn-info.btn-lg, context: button.btn.btn-info.btn-lg]
      var $this   = $(this)
      // 从触发元素中获取属性 href,第一次 href 是 undefined
      var href    = $this.attr('href')
      // 正则表达式 /.*(?=#[^\s]+$)/ 代表 "任意长度内容字符串" + "?=#" + "非空字符一次或多次"
      // $target = [div#myModal.modal.fade, context: document, selector: "#myModal"]
      // $target 是弹窗实例
      // 在console中可以超链接到 div 对象
      var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, '')))
      // 第一次 $target.data() 中没有值，结果为 {}
      // 如果弹窗元素上已经有该弹窗实例(即弹出过一次了)，则设置 option 值为字符串 toggle
      // 否则将 $target.data() 、$this.data() merge 到 { remote: !/#/.test(href) && href },合并为 option 对象
      // 第一次 option = {remote: undefined, target: "#myModal", toggle: "modal"}
      // 这里的 target 的属性是字符串,在 console 中无法超链接到 div 对象,以后把这种情况称为带 console 超链属性
      // toggle 用来转换弹窗的开关状态
      // 第二次 option = toggle
      var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())
      // console.log("====");
      // console.log(option);
      // console.log("----");
      // 如果 $this 是超链接，阻止默认事件
      if ($this.is('a')) e.preventDefault()
      // 什么时候触发 show ？
      $target.one('show.bs.modal', function (showEvent) {
        // showEvent =
        // jQuery.Event {type: "show", relatedTarget: button.btn.btn-info.btn-lg, timeStamp: 1508683190953,
        // jQuery112407061662116767498: true, isTrigger: 3, …}
         if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
         $target.one('hidden.bs.modal', function () {
           if (window.console) {
             console.log("step 61");
           }
           //定义一次hide事件，给所单击元素加上焦点??????为什么要加焦点啊？
           $this.is(':visible') && $this.trigger('focus')
         })
      })
      // 然后启动插件 Plugin
      Plugin.call($target, option, this)
    })
  }(jQuery);
</script>
